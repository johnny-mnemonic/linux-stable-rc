From 331e298ddbcdc1bf4e1812cbe2a768f3be7528b1 Mon Sep 17 00:00:00 2001
From: Tomas Glozar <tglozar@gmail.com>
Date: Fri, 12 Jan 2024 19:11:18 +0100
Subject: [PATCH 19/26] Revert "arch: remove ARCH_TASK_STRUCT_ON_STACK"

This reverts commit 0eb5085c38749f2a91e5bd8cbebb1ebf3398343c.

Signed-off-by: Tomas Glozar <tglozar@gmail.com>
---
 arch/powerpc/kexec/core_64.c |  3 ++-
 include/linux/init_task.h    |  7 +++++++
 include/linux/sched.h        |  2 ++
 init/init_task.c             | 10 ++++++++--
 4 files changed, 19 insertions(+), 3 deletions(-)

diff --git a/arch/powerpc/kexec/core_64.c b/arch/powerpc/kexec/core_64.c
index 762e4d09aacf..0bee7ca9a77c 100644
--- a/arch/powerpc/kexec/core_64.c
+++ b/arch/powerpc/kexec/core_64.c
@@ -283,7 +283,8 @@ static void kexec_prepare_cpus(void)
  * We could use a smaller stack if we don't care about anything using
  * current, but that audit has not been performed.
  */
-static union thread_union kexec_stack = { };
+static union thread_union kexec_stack __init_task_data =
+	{ };
 
 /*
  * For similar reasons to the stack above, the kexecing CPU needs to be on a
diff --git a/include/linux/init_task.h b/include/linux/init_task.h
index bccb3f1f6262..40fc5813cf93 100644
--- a/include/linux/init_task.h
+++ b/include/linux/init_task.h
@@ -37,6 +37,13 @@ extern struct cred init_cred;
 
 #define INIT_TASK_COMM "swapper"
 
+/* Attach to the init_task data structure for proper alignment */
+#ifdef CONFIG_ARCH_TASK_STRUCT_ON_STACK
+#define __init_task_data __section(".data..init_task")
+#else
+#define __init_task_data /**/
+#endif
+
 /* Attach to the thread_info data structure for proper alignment */
 #define __init_thread_info __section(".data..init_thread_info")
 
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 3c2abbc587b4..4f885d8aebfc 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1840,7 +1840,9 @@ extern void ia64_set_curr_task(int cpu, struct task_struct *p);
 void yield(void);
 
 union thread_union {
+#ifndef CONFIG_ARCH_TASK_STRUCT_ON_STACK
 	struct task_struct task;
+#endif
 #ifndef CONFIG_THREAD_INFO_IN_TASK
 	struct thread_info thread_info;
 #endif
diff --git a/init/init_task.c b/init/init_task.c
index 4daee6d761c8..e0c8785a6ec0 100644
--- a/init/init_task.c
+++ b/init/init_task.c
@@ -52,7 +52,8 @@ static struct sighand_struct init_sighand = {
 };
 
 #ifdef CONFIG_SHADOW_CALL_STACK
-unsigned long init_shadow_call_stack[SCS_SIZE / sizeof(long)] = {
+unsigned long init_shadow_call_stack[SCS_SIZE / sizeof(long)]
+		__init_task_data = {
 	[(SCS_SIZE / sizeof(long)) - 1] = SCS_END_MAGIC
 };
 #endif
@@ -61,7 +62,12 @@ unsigned long init_shadow_call_stack[SCS_SIZE / sizeof(long)] = {
  * Set up the first task table, touch at your own risk!. Base=0,
  * limit=0x1fffff (=2MB)
  */
-struct task_struct init_task __aligned(L1_CACHE_BYTES) = {
+struct task_struct init_task
+#ifdef CONFIG_ARCH_TASK_STRUCT_ON_STACK
+	__init_task_data
+#endif
+	__aligned(L1_CACHE_BYTES)
+= {
 #ifdef CONFIG_THREAD_INFO_IN_TASK
 	.thread_info	= INIT_THREAD_INFO(init_task),
 	.stack_refcount	= REFCOUNT_INIT(1),
-- 
2.25.1

